export declare const tweens: Tween[];
export declare class Tween {
    targetValue: number;
    startValue: number;
    active: boolean;
    currentFrame: number;
    tweenDuration: number;
    object: any;
    property: string;
    onUpdate?: (params: any) => void;
    onUpdateParams?: any;
    onComplete?: (params?: any) => void;
    onCompleteParams?: any;
    easing: (x: number) => number;
    constructor(object: any, property: string, targetValue: number, tweenDuration: number, autostart?: boolean, easing?: (x: number) => number, autoHandled?: boolean);
    setOnUpdate(callback: (arg?: any) => void, parameters?: any): Tween;
    setOnComplete(callback: (arg?: any) => void, parameters?: any): Tween;
    start(): void;
    initIterations(): void;
    update(deltaTime: number): boolean;
}
declare function noEase(x: number): number;
declare function inSine(x: number): number;
declare function outSine(x: number): number;
declare function inOutSine(x: number): number;
declare function inCirc(x: number): number;
declare function outCirc(x: number): number;
declare function inOutCirc(x: number): number;
declare function inQuad(x: number): number;
declare function outQuad(x: number): number;
declare function inOutQuad(x: number): number;
declare function inCubic(x: number): number;
declare function outCubic(x: number): number;
declare function inOutCubic(x: number): number;
declare function inQuart(x: number): number;
declare function outQuart(x: number): number;
declare function inOutQuart(x: number): number;
declare function inQuintic(x: number): number;
declare function outQuintic(x: number): number;
declare function inOutQuintic(x: number): number;
declare function inExpo(x: number): number;
declare function outExpo(x: number): number;
declare function inOutExpo(x: number): number;
declare function inBack(x: number): number;
declare function outBack(x: number): number;
declare function inOutBack(x: number): number;
declare function inElastic(x: number): number;
declare function outElastic(x: number): number;
declare function inOutElastic(x: number): number;
declare function inBounce(x: number): number;
declare function outBounce(x: number): number;
declare function inOutBounce(x: number): number;
declare function update(deltaTime: number): void;
export declare class ChainedTween extends Tween {
    tweensChained: Tween[];
    complete: boolean;
    constructor(tweensToAdd: Tween[], onCompleteCb?: (params?: any) => void, onCompleteParameters?: any);
    tweenFinished(): void;
    update(): boolean;
    cancel(): void;
}
declare const _default: {
    Tween: typeof Tween;
    ChainedTween: typeof ChainedTween;
    update: typeof update;
    Easing: {
        noEase: typeof noEase;
        inSine: typeof inSine;
        outSine: typeof outSine;
        inOutSine: typeof inOutSine;
        inCirc: typeof inCirc;
        outCirc: typeof outCirc;
        inOutCirc: typeof inOutCirc;
        inQuad: typeof inQuad;
        outQuad: typeof outQuad;
        inOutQuad: typeof inOutQuad;
        inQuart: typeof inQuart;
        outQuart: typeof outQuart;
        inOutQuart: typeof inOutQuart;
        inCubic: typeof inCubic;
        outCubic: typeof outCubic;
        inOutCubic: typeof inOutCubic;
        inQuintic: typeof inQuintic;
        outQuintic: typeof outQuintic;
        inOutQuintic: typeof inOutQuintic;
        inExpo: typeof inExpo;
        outExpo: typeof outExpo;
        inOutExpo: typeof inOutExpo;
        inBack: typeof inBack;
        outBack: typeof outBack;
        inOutBack: typeof inOutBack;
        inElastic: typeof inElastic;
        outElastic: typeof outElastic;
        inOutElastic: typeof inOutElastic;
        inBounce: typeof inBounce;
        outBounce: typeof outBounce;
        inOutBounce: typeof inOutBounce;
    };
};
export default _default;
